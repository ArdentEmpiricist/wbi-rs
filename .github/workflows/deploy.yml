name: Deploy

on:
  push:
    tags:
      - "[0-9]+\\.[0-9]+\\.[0-9]+"

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Package binaries
        shell: bash
        run: |
          # Define all binaries you want to publish
          binaries=("wbi" "wbi-gui")
          for binary in "${binaries[@]}"; do
            # Create a directory named by binary, version, and platform
            dirname="${binary}-${VERSION}-${{ matrix.target }}"
            mkdir -p "$dirname"

            # Move the appropriate artifact into that directory
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              mv "target/${{ matrix.target }}/release/${binary}.exe" "$dirname/"
            else
              mv "target/${{ matrix.target }}/release/${binary}" "$dirname/"
            fi

            # Compress each directory into its own archive
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              artifact="${dirname}.zip"
              7z a "$artifact" "$dirname" >/dev/null
            else
              artifact="${dirname}.tar.gz"
              tar -czf "$artifact" "$dirname"
            fi

            # Export each archive under a unique ENV var for the release step
            key="ASSET_$(echo "$binary" | tr '[:lower:]-' '[:upper:]_')"
            echo "${key}=${artifact}" >> $GITHUB_ENV
          done

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          # Reference both the CLI and GUI archives
          files: |
            ${{ env.ASSET_WBI }}
            ${{ env.ASSET_WBI_GUI }}
